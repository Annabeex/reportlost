"use client";

import React, { useState } from "react";
import { supabase } from "@/lib/supabaseClient";
import { uploadImageAndAnalyze, VisionResult } from "@/lib/Apivision";
import AutoCompleteCitySelect from "@/components/AutoCompleteCitySelect";

const MIN_CITY_CHARS = 1;
const CITY_STATE_REGEX = /^(.*?)(?:\s*\(([A-Za-z]{2})\))?$/;

function extractCityAndState(raw: string): { city: string; stateId: string } {
  const trimmed = (raw || "").trim();
  const match = trimmed.match(CITY_STATE_REGEX);
  if (!match) return { city: trimmed, stateId: "" };
  const cityPart = (match[1] || "").trim();
  const statePart = (match[2] || "").toUpperCase();
  return { city: cityPart, stateId: statePart };
}

/** D√©duit un titre d'objet √† partir de la vision/description (sans SEO). */
function deriveItemTitle(opts: {
  description?: string;
  labels?: string;   // visionLabels (comma-separated)
  objects?: string;  // visionObjects (comma-separated)
}) {
  const pickFirst = (s?: string) =>
    (s || "")
      .split(",")[0]
      .replace(/\s+/g, " ")
      .trim();

  const fromObjects = pickFirst(opts.objects);
  const fromLabels = pickFirst(opts.labels);
  const fromDesc = (opts.description || "").split(/[‚Äî‚Äì\-,.:;|]/)[0].trim();

  const chosen =
    fromObjects ||
    fromLabels ||
    (fromDesc ? (fromDesc.length > 60 ? fromDesc.slice(0, 57) + "‚Ä¶" : fromDesc) : "");

  return chosen || "Found item";
}

export default function FoundItemsForm({ defaultCity = "" }: { defaultCity?: string }) {
  const [photo, setPhoto] = useState<File | null>(null);
  const [description, setDescription] = useState("");
  const [city, setCity] = useState<string>(defaultCity);
  const [stateId, setStateId] = useState<string>(() => extractCityAndState(defaultCity).stateId);
  const [date, setDate] = useState(() => new Date().toISOString().split("T")[0]);

  const [uploading, setUploading] = useState(false);
  const [analyzing, setAnalyzing] = useState(false);
  const [progress, setProgress] = useState(0);

  const [success, setSuccess] = useState(false);
  const [step, setStep] = useState(1);
  const [autoGenerated, setAutoGenerated] = useState(false);

  const [visionLabels, setVisionLabels] = useState("");
  const [visionLogos, setVisionLogos] = useState("");
  const [visionObjects, setVisionObjects] = useState("");
  const [visionOcrText, setVisionOcrText] = useState("");
  const [visionImageUrl, setVisionImageUrl] = useState("");

  const [email, setEmail] = useState("");
  const [phone, setPhone] = useState("");
  const [dropoffLocation, setDropoffLocation] = useState("");
  const [errorMsg, setErrorMsg] = useState("");
  const [fixedTitle, setFixedTitle] = useState("");
  const [submitting, setSubmitting] = useState(false);

  const handleImageUpload = async (file: File) => {
    setUploading(true);
    setAnalyzing(true);
    setProgress(0);

    const progressInterval = setInterval(() => {
      setProgress((prev) => (prev < 90 ? prev + 10 : prev));
    }, 300);

    try {
      const result: VisionResult = await uploadImageAndAnalyze(file);
      const labels = result.labels?.join(", ") || "";
      const logos = result.logos?.join(", ") || "";
      const objects = result.objects?.join(", ") || "";
      const ocrText = result.ocrText || "";
      const imageUrl = result.imageUrl || "";

      setVisionLabels(labels);
      setVisionLogos(logos);
      setVisionObjects(objects);
      setVisionOcrText(ocrText);
      setVisionImageUrl(imageUrl);

      const descriptionText = [labels, ocrText].filter(Boolean).join(" ‚Äî ");
      if (descriptionText) {
        setDescription(descriptionText);
        setAutoGenerated(true);
      }
    } catch (err) {
      console.error("Image analysis failed:", err);
      setVisionImageUrl("");
    } finally {
      clearInterval(progressInterval);
      setProgress(100);
      setTimeout(() => setAnalyzing(false), 500);
      setUploading(false);
    }
  };

  const handlePhotoChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0] || null;
    setPhoto(file);
    setVisionImageUrl("");
    if (file) {
      await handleImageUpload(file);
    }
  };

  const handleCityChange = (value: string) => {
    setCity(value);
    const { stateId: parsedStateId } = extractCityAndState(value);
    setStateId(parsedStateId);
  };

  const handleNext = () => setStep(2);

  const handleSubmit = async () => {
    if (uploading || analyzing || submitting) return;
    setErrorMsg("");
    setSubmitting(true);

    try {
      const { city: cleanedCityFromInput, stateId: parsedStateId } = extractCityAndState(city);
      const normalizedCity = cleanedCityFromInput;
      const normalizedStateId = (stateId || parsedStateId || "").toUpperCase();

      // 1) Use vision URL if any, otherwise upload photo now
      let publicImageUrl = visionImageUrl;
      if (!publicImageUrl && photo) {
        const safeName = photo.name.replace(/\s+/g, "_").replace(/[^a-zA-Z0-9._-]/g, "");
        const filename = `found-${Date.now()}-${safeName}`;

        setUploading(true);
        try {
          const { error: uploadError } = await supabase.storage.from("images").upload(filename, photo, {
            cacheControl: "3600",
            upsert: false,
          });
          if (uploadError) throw uploadError;

          const { data: urlData } = supabase.storage.from("images").getPublicUrl(filename);
          if (!urlData?.publicUrl) throw new Error("No public URL returned.");
          publicImageUrl = urlData.publicUrl;
          setVisionImageUrl(publicImageUrl);
        } finally {
          setUploading(false);
        }
      }

      // 2) Item title (depuis description/vision, pas SEO)
      const itemTitle = deriveItemTitle({
        description,
        labels: visionLabels,
        objects: visionObjects,
      });
      setFixedTitle(itemTitle);

      // 3) Submit
      const payload = {
        image_url: publicImageUrl || null,
        description,
        city: normalizedCity || null,
        state_id: normalizedStateId || null,
        date,
        labels: visionLabels ?? "",
        logos: visionLogos ?? "",
        objects: visionObjects ?? "",
        ocr_text: visionOcrText ?? "",
        title: itemTitle || null,
        email: email ?? "",
        phone: phone ?? "",
        dropoff_location: dropoffLocation ?? "",
      };

      const res = await fetch("/api/found-items", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });

      if (!res.ok) {
        const body = await res.text().catch(() => "");
        console.error("Error submitting found item via API:", res.status, body);
        throw new Error("Failed to submit found item");
      }

      setSuccess(true);
      setStep(3);
    } catch (err) {
      console.error("Error submitting found item:", err);
      setErrorMsg("Something went wrong. Please try again.");
    } finally {
      setSubmitting(false);
    }
  };

  // ---------- UI ----------
  const inputBase =
    "w-full rounded-lg border border-gray-300 px-3 py-2.5 sm:py-3 text-[16px] focus:outline-none focus:ring-2 focus:ring-blue-400";
  const btnPrimary =
    "w-full sm:w-auto inline-flex items-center justify-center rounded-lg bg-gradient-to-r from-green-700 to-green-500 hover:from-green-800 hover:to-green-600 text-white font-semibold px-4 sm:px-6 py-2 sm:py-2.5 shadow disabled:opacity-60 disabled:cursor-not-allowed";
  const btnSecondary =
    "w-full sm:w-auto inline-flex items-center justify-center rounded-lg bg-gray-100 hover:bg-gray-200 text-gray-800 font-medium px-4 sm:px-5 py-2 sm:py-2.5 border border-gray-300";

  return (
    <div className="bg-white p-4 sm:p-6 rounded-xl shadow space-y-4 sm:space-y-5">
      {step === 1 && (
        <>
          <h2 className="text-lg sm:text-xl font-semibold">üì¶ Found Item Submission</h2>

          {/* File picker as a clear button on mobile */}
          <div className="space-y-1">
            <label className="block font-medium">üì∑ Upload a photo of the found item (Recommended)</label>

            <div className="flex items-center gap-3">
              <label className="cursor-pointer inline-flex items-center rounded-lg bg-blue-50 hover:bg-blue-100 text-blue-700 font-medium px-3 sm:px-4 py-2 border border-blue-200">
                Choose a file
                <input
                  type="file"
                  accept="image/*"
                  onChange={handlePhotoChange}
                  className="hidden"
                />
              </label>

              <span className="text-gray-600 text-sm truncate max-w-[60%] sm:max-w-[300px]">
                {photo?.name || "No file selected"}
              </span>
            </div>
          </div>

          {analyzing && (
            <div className="space-y-2">
              <p className="text-yellow-700 text-sm">üîç Analyzing the image‚Ä¶</p>
              <div className="w-full h-2 bg-gray-200 rounded overflow-hidden">
                <div
                  className="h-2 bg-yellow-500 transition-all duration-300"
                  style={{ width: `${progress}%` }}
                />
              </div>
            </div>
          )}

          <div className="space-y-2">
            <label className="block font-medium">‚úèÔ∏è What did you find and where?</label>
            <textarea
              placeholder="Please provide a detailed description"
              className={`${inputBase} min-h-[110px]`}
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              disabled={analyzing}
            />
            {autoGenerated && (
              <p className="text-sm text-gray-600">
                ‚ö†Ô∏è Please review and complete if needed (street, venue, mall‚Ä¶)
              </p>
            )}
          </div>

          <div className="space-y-2">
            <label className="block font-medium">üèôÔ∏è City where it was found</label>
            <AutoCompleteCitySelect
              value={city}
              onChange={handleCityChange}
              onSelect={(selected: any) => setStateId(selected.state_id)}
              minQueryLength={MIN_CITY_CHARS}
            />
          </div>

          <div className="space-y-2">
            <label className="block font-medium">üóìÔ∏è Date when it was found</label>
            <input
              type="date"
              className={inputBase}
              value={date}
              onChange={(e) => setDate(e.target.value)}
            />
          </div>

          <div className="flex flex-col sm:flex-row gap-3 pt-2">
            <button
              onClick={handleNext}
              disabled={uploading || analyzing || submitting}
              className={btnPrimary}
            >
              Next
            </button>
          </div>
        </>
      )}

      {step === 2 && !success && (
        <>
          <h2 className="text-lg sm:text-xl font-semibold">üì© Contact Information</h2>

          <div className="space-y-2">
            <label className="block font-medium">üìß Your email address (optional)</label>
            <input
              type="email"
              className={inputBase}
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              inputMode="email"
            />
          </div>

          <div className="space-y-2">
            <label className="block font-medium">üìû Your phone number (optional)</label>
            <input
              type="tel"
              className={inputBase}
              value={phone}
              onChange={(e) => setPhone(e.target.value)}
              inputMode="tel"
            />
          </div>

          <div className="space-y-2">
            <label className="block font-medium">
              üè¢ If you already dropped it off or plan to bring it somewhere specific, please indicate the location.
            </label>
            <input
              type="text"
              placeholder="e.g., police station, info desk, airport, still with me‚Ä¶"
              className={inputBase}
              value={dropoffLocation}
              onChange={(e) => setDropoffLocation(e.target.value)}
            />
          </div>

          {errorMsg && <p className="text-red-600 text-sm">{errorMsg}</p>}

          <div className="flex flex-col sm:flex-row gap-3 pt-2">
            <button
              onClick={() => setStep(1)}
              className={btnSecondary}
              type="button"
            >
              Back
            </button>
            <button
              onClick={handleSubmit}
              disabled={uploading || analyzing || submitting}
              className={btnPrimary}
            >
              Submit report
            </button>
          </div>
        </>
      )}

      {step === 3 && success && (
        <div className="text-center space-y-4">
          <h2 className="text-xl font-bold text-green-700">üéâ Thank you!</h2>
          <p>Your report has been successfully submitted.</p>
          <div className="bg-gray-50 p-4 rounded border text-left space-y-1">
            <p>
              <strong>üìù Item:</strong> {fixedTitle}
            </p>
            <p>
              <strong>üìç City:</strong> {city}
            </p>
            <p>
              <strong>üóìÔ∏è Date:</strong> {date}
            </p>
            <p>
              <strong>üßæ Description:</strong> {description}
            </p>
            {dropoffLocation && (
              <p>
                <strong>üè¢ Dropped off at:</strong> {dropoffLocation}
              </p>
            )}
          </div>
          <p className="text-green-600 font-medium">
            You're awesome. Your contribution could help someone recover something precious.
          </p>
        </div>
      )}
    </div>
  );
}
